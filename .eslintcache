[{"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js":"1","/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js":"2","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js":"3","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/Screen1Container.js":"4","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/DropdownsContainer1.js":"5","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/TableContainer1.js":"6","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown1.js":"7","/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen1.js":"8","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/Screen2Container.js":"9","/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen2.js":"10","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/DropdownsContainer2.js":"11","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/DisplayDropdown2.js":"12","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/TableContainer2.js":"13","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TableScreen2.js":"14","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/Triangles.js":"15","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Containers/Screen3Container.js":"16","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PartInfo.js":"17","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewProcess.js":"18","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskAlerts.js":"19"},{"size":272,"mtime":1609632473127,"results":"20","hashOfConfig":"21"},{"size":790,"mtime":1609785586407,"results":"22","hashOfConfig":"21"},{"size":8770,"mtime":1609778114787,"results":"23","hashOfConfig":"21"},{"size":1157,"mtime":1609632338097,"results":"24","hashOfConfig":"21"},{"size":1934,"mtime":1609634554757,"results":"25","hashOfConfig":"21"},{"size":326,"mtime":1609631630637,"results":"26","hashOfConfig":"21"},{"size":883,"mtime":1609631881177,"results":"27","hashOfConfig":"21"},{"size":70099,"mtime":1609632296767,"results":"28","hashOfConfig":"21"},{"size":1122,"mtime":1609634729857,"results":"29","hashOfConfig":"21"},{"size":231389,"mtime":1609633249047,"results":"30","hashOfConfig":"21"},{"size":1542,"mtime":1609634515227,"results":"31","hashOfConfig":"21"},{"size":807,"mtime":1609634482367,"results":"32","hashOfConfig":"21"},{"size":302,"mtime":1609634741567,"results":"33","hashOfConfig":"21"},{"size":2261,"mtime":1609731025237,"results":"34","hashOfConfig":"21"},{"size":1537,"mtime":1609730730777,"results":"35","hashOfConfig":"21"},{"size":720,"mtime":1609787896777,"results":"36","hashOfConfig":"21"},{"size":1299,"mtime":1609788102087,"results":"37","hashOfConfig":"21"},{"size":1740,"mtime":1609787376097,"results":"38","hashOfConfig":"21"},{"size":1217,"mtime":1609787879087,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1xkrzvd",{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js",[],["83","84"],"/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js",["85","86","87"],"import Screen1Container from './Screen1/Containers/Screen1Container';\nimport Screen2Container from './Screen2/Containers/Screen2Container';\nimport Screen3Container from './Screen3/Containers/Screen3Container';\nimport React, {useState, useEffect} from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlusCircle, faMinusCircle } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faPlusCircle, faMinusCircle)\n\nconst App = () => {\n\n  return (\n    <Switch>\n      <Route path=\"/subdivisions/:name\" children={<Screen2Container />} />\n      <Route path=\"/parts\" children={<Screen3Container />} />\n      <Route path=\"/\" render={() => <Screen1Container />} />\n    </Switch>\n  );\n}\n\nexport default App;\n","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js",["88"],"\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { v4 as uuidv4 } from 'uuid';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryLabel, VictoryStack } from 'victory';\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\n\nconst TableScreen1 = ({ kpiFilter, unitFilter, data, percentageMetric }) => {\n  const history = useHistory();\n\n  const [kpiDisplay, setKpiDisplay] = useState(false);\n  const [subdivisionDisplay, setSubdivisionDisplay] = useState(false);\n\n  // can animate these toggles with bootstrap collapse eventually\n  const toggleKPIs = () => {\n    setKpiDisplay(!kpiDisplay);\n  }\n\n  const toggleSubdivisions = () => {\n    setSubdivisionDisplay(!subdivisionDisplay);\n  }\n\n  // could probably do this with hooks bc we need the list for all situations\n  // might also be more effective to take averages as soon as loaded so you can \n  // toggle faster\n  // honestly this whole thing is very inefficient -- we're iterating over the array\n  // way too many times\n  // luckily it's a small array\n  // but find a more efficient way to do it in the long run\n  const mapDivisionRows = () => {\n    const divisionsList = [];\n    let divisionRows = [];\n    for (let row of data) {\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"])\n      }\n    }\n\n    for (let division of divisionsList) {\n      divisionRows.push(getAverages(division))\n    }\n    \n    return mapRows(divisionRows)\n  }\n\n  const getAverages = (division) => {\n    const averagedRow = {\n      \"% Design Errors\": 0,\n      \"% Schedule delays\": 0,\n      \"% Cost overrun\": 0,\n      \"Iterations per design\": 0,\n      \"% Rushed design\": 0,\n      \"Digital design\": 0,\n      \"SME Involvement\": 0,\n      \"Forecasted Risk\": 0\n    };\n    const allRows = data.filter(row => {return row[\"Division\"] === division})\n\n    for (let row of allRows) {\n      for (let key in averagedRow) {\n        averagedRow[key] += row[key];\n      }\n    }\n    \n    for (let key in averagedRow) {\n      averagedRow[key] = Math.round(averagedRow[key]/allRows.length);\n    }\n\n    averagedRow[\"Division\"] = division\n\n    return averagedRow;\n  }\n\n  const redirectScreen2 = (subdivisionName) => {\n    history.push(`/subdivisions/${subdivisionName}`)\n  }\n\n  \n  const mapRows = (rowData) => {\n    if (unitFilter !== \"(All)\") {\n      rowData = rowData.filter(row => {return row[\"Division\"] === unitFilter})\n    }\n\n    const divisionsList = [];\n    return rowData.map((row) => {\n      let flag = false;\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"]);\n        flag = true;\n      }\n\n      return <tr key={uuidv4()}>\n\n        {flag ? <td>{row[\"Division\"]}</td> : <td style={{ border: 'none' }}></td>}\n\n        <td onClick={event => redirectScreen2(event.target.innerText)} className={`hover-hand ${subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}`}>\n          {row[\"Subdivision\"]}\n        </td>\n        <td>\n          {createBar(row[percentageMetric])}\n        </td>\n        <td className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"} style={{ border: 'none' }}></td>\n        <td className={checkIfDisplayed('Iterations per design')}>\n          {row[\"Iterations per design\"]}\n        </td>\n        <td className={checkIfDisplayed('% Rushed design')}>\n          {row[\"% Rushed design\"]}\n        </td>\n        <td className={checkIfDisplayed('Digital design')}>\n          {row[\"Digital design\"]}\n        </td>\n        <td className={checkIfDisplayed('SME Involvment')}>\n          {row[\"SME Involvement\"]}\n        </td>\n        <td className={kpiDisplay ? \"toggle-display in\" : \"toggle-display\"} ></td>\n        <td>\n          {forecastRisk(row[\"Forecasted Risk\"])}\n        </td>\n      </tr>\n    })\n  }\n\n  const forecastRisk = (dataPoint) => {\n    let color = \"green\";\n    if (dataPoint === 2) {\n      color = \"#E0BA3E\";\n    } else if (dataPoint === 3) {\n      color = \"red\";\n    }\n\n    const formattedData = [{ x: 0, y: 100 }]\n\n    return <VictoryChart maxDomain={{ y: 100 }} horizontal height={10} width={100} padding={{ top: 10, bottom: 10 }}>\n      <VictoryBar\n        style={{ data: { fill: color, width: 20 }, labels: { fill: \"transparent\" } }}\n        data={formattedData}\n        labels={({ datum }) => (`${datum.y}`)}\n      />\n      <VictoryAxis\n        style={{\n          axis: { stroke: \"transparent\" },\n          ticks: { stroke: \"transparent\" },\n          tickLabels: { fill: \"transparent\" }\n        }}\n      />\n      <VictoryAxis\n        dependentAxis\n        style={{\n          axis: { stroke: \"transparent\" },\n          tick: { stroke: \"transparent\" },\n          tickLabels: { fill: \"transparent\" }\n        }}\n      />\n    </VictoryChart>\n  }\n\n  const checkIfDisplayed = (column) => {\n    if (!kpiDisplay) {\n      return \"toggle-display\";\n    }\n    else {\n      if (kpiFilter !== '(All)') {\n        if (kpiFilter === column) {\n          return \"toggle-display in\";\n        } else {\n          return \"toggle-display\";\n        }\n      }\n    }\n  }\n\n  const createBar = (dataPoint) => {\n    const formattedData = [{ x: 0, y: dataPoint }];\n\n    let color = \"green\";\n    if (dataPoint > 33 && dataPoint < 67) {\n      color = \"#E0BA3E\";\n    } else if (dataPoint > 67) {\n      color = \"red\";\n    }\n\n    return (\n\n      <VictoryChart maxDomain={{ y: 100 }} horizontal height={10} width={100} padding={{ top: 2, bottom: 8 }}>\n        <VictoryStack\n          style={{ labels: { fill: \"lightskyblue\", fontSize: 4 } }}\n        >\n          <VictoryBar\n            cornerRadius={{ bottomLeft: 2, bottomRight: 2 }}\n            style={{ data: { fill: color, width: 4, stroke: \"whitesmoke\", strokeWidth: 0.5 } }}\n            data={formattedData}\n            labels={() => (`${dataPoint}%`)}\n            labelComponent={\n              <VictoryLabel x={dataPoint} dx={dataPoint * 0.01} textAnchor=\"middle\" verticalAnchor=\"middle\" />\n            }\n          />\n          <VictoryBar\n            cornerRadius={2}\n            style={{ data: { fill: \"white\", width: 4, stroke: \"whitesmoke\", strokeWidth: 0.5 } }}\n            data={[{ x: 0, y: 100 - dataPoint }]}\n          />\n        </VictoryStack>\n        <VictoryAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            ticks: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n          tickValues={[0]}\n          tickCount={1}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            tick: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n        />\n      </VictoryChart>\n    );\n  }\n\n  return (\n    <Table>\n      {/* this is also a mess, try to fix */}\n      <thead>\n        <tr>\n          <th style={{ width: '12%' }}>\n            {/* hover/click thing is a little messed up, try to fix */}\n          <div className=\"hover-hand\" onClick={() => toggleSubdivisions()}>\n            Division &nbsp;\n            {subdivisionDisplay ? <FontAwesomeIcon className=\"hover-hand\" icon=\"minus-circle\" /> : <FontAwesomeIcon className=\"hover-hand\" icon=\"plus-circle\" />}\n            </div>\n          </th>\n          <th className={subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}>\n            Subdivision\n          </th>\n          <th style={{ width: \"50%\" }}>\n            {percentageMetric}\n          </th>\n          <th style={{ width: \"15%\" }} className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"}>\n            <Button style={{backgroundColor: \"transparent\", border: \"2px solid white\"}} className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"} onClick={toggleKPIs}>Display design performance KPIs <FontAwesomeIcon icon=\"plus-circle\" /></Button>\n          </th>\n          <th className={checkIfDisplayed('Iterations per design')}>\n            Iterations per design\n          </th>\n          <th className={checkIfDisplayed('% Rushed design')}>\n            Rushed design\n          </th>\n          <th className={checkIfDisplayed('Design digitization')}>\n            Design digitization\n          </th>\n          <th className={checkIfDisplayed('SME involvement')}>\n            SME involvement \n          </th>\n          <th className={kpiDisplay ? \"toggle-display in\" : \"toggle-display\"}><FontAwesomeIcon className=\"hover-hand\" onClick={() => toggleKPIs()} icon=\"minus-circle\" /></th>\n          <th style={{ width: \"7%\" }}>\n            Forecasted risk\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {subdivisionDisplay ? mapRows(data) : mapDivisionRows()}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableScreen1;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/Screen1Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/DropdownsContainer1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/TableContainer1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/Screen2Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/DropdownsContainer2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/DisplayDropdown2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/TableContainer2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TableScreen2.js",["89","90","91","92","93","94","95","96"],"import React, { useEffect, useState, useRef } from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Line } from 'react-konva';\nimport Table from 'react-bootstrap/Table';\nimport { v4 as uuidv4 } from 'uuid';\nimport Triangles from './Triangles';\n\nconst TableScreen2 = ({ productFilter, data, percentageMetric }) => {\n    \n  // ok this is dumb you know all the products and departments just set them manually\n  // if you have to do it programmatically later you can do that with the help of a solid backend\n\n  const checkIfDisplayed = (product) => {\n    if (productFilter !== '(All)') {\n      if (productFilter === product) {\n        return \"toggle-display in\";\n      } else {\n        return \"toggle-display\";\n      }\n    }\n  }\n\n  const mapRow = (product) => {\n    const thisProduct = data.filter(row => {return row[\"Product\"] === product});\n    thisProduct.sort((a, b) => (a[\"Department\"] > b[\"Department\"]) ? 1 : -1)\n    return thisProduct.map(row => <td className={checkIfDisplayed(product)}><Triangles row={row} /></td>)\n  }\n\n  return(\n    <Table>\n      <thead>\n        <th>\n          \n        </th>\n        <th>\n          Body design\n        </th>\n        <th>\n          Electronic systems\n        </th>\n        <th>\n          Interior design\n        </th>\n        <th>\n          Production engineering\n        </th>\n        <th>\n          Vehicle performance development\n        </th>\n      </thead>\n      <tbody>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 1\")}>\n            Product 1\n          </th>\n          {mapRow(\"Product 1\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 2\")}>\n            Product 2\n          </th>\n          {mapRow(\"Product 2\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 3\")}>\n            Product 3\n          </th>\n          {mapRow(\"Product 3\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 4\")}>\n            Product 4\n          </th>\n          {mapRow(\"Product 4\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 5\")}>\n            Product 5\n          </th>\n          {mapRow(\"Product 5\")}\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableScreen2;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/Triangles.js",["97","98","99","100","101","102","103"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst Triangles = ({row}) => {\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    setWidth(elementRef.current.attrs.container.offsetWidth);\n\n  }, [elementRef.current]);\n\n  const getColor = (value) => {\n    if (value > 67) {\n      return 'red';\n    } else if (value > 33) {\n      return '#E0BA3E';\n    } else {\n      return 'green';\n    }\n  };\n\n  const getStrokeColor = () => {\n    const topColor = getColor(row[\"% Schedule delays\"]);\n    const bottomColor = getColor(row[\"% Design Errors\"]);\n\n    if (topColor === 'red' && bottomColor === 'red' || topColor === 'red' && bottomColor === '#E0BA3E' || topColor === '#E0BA3E' && bottomColor === 'red') {\n      return 'darkred';\n    } else {\n      return 'black';\n    }\n  };\n\n  const triangleWidth = window.innerWidth/10\n\n  return(\n    <Stage ref={elementRef} width={width} height={40}>\n      <Layer>\n        <Line closed points={[(width - triangleWidth)/2 + 2, 0, (width - triangleWidth)/2 + triangleWidth, 0, (width - triangleWidth)/2 + triangleWidth, 40]} fill={getColor(row[\"% Schedule delays\"])} stroke={getStrokeColor()} strokeWidth={2} />\n        <Line closed points={[(width - triangleWidth)/2, 0, (width - triangleWidth)/2, 40, (width - triangleWidth)/2 + triangleWidth, 40]} fill={getColor(row[\"% Design Errors\"])} stroke={getStrokeColor()} strokeWidth={2} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default Triangles;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Containers/Screen3Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PartInfo.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewProcess.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskAlerts.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":4,"column":16,"nodeType":"110","messageId":"111","endLine":4,"endColumn":24},{"ruleId":"108","severity":1,"message":"112","line":4,"column":26,"nodeType":"110","messageId":"111","endLine":4,"endColumn":35},{"ruleId":"108","severity":1,"message":"113","line":5,"column":25,"nodeType":"110","messageId":"111","endLine":5,"endColumn":35},{"ruleId":"108","severity":1,"message":"112","line":6,"column":27,"nodeType":"110","messageId":"111","endLine":6,"endColumn":36},{"ruleId":"108","severity":1,"message":"112","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":1,"column":28,"nodeType":"110","messageId":"111","endLine":1,"endColumn":36},{"ruleId":"108","severity":1,"message":"114","line":1,"column":38,"nodeType":"110","messageId":"111","endLine":1,"endColumn":44},{"ruleId":"108","severity":1,"message":"115","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":13},{"ruleId":"108","severity":1,"message":"116","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":15},{"ruleId":"108","severity":1,"message":"117","line":3,"column":17,"nodeType":"110","messageId":"111","endLine":3,"endColumn":22},{"ruleId":"108","severity":1,"message":"118","line":3,"column":24,"nodeType":"110","messageId":"111","endLine":3,"endColumn":28},{"ruleId":"108","severity":1,"message":"119","line":5,"column":16,"nodeType":"110","messageId":"111","endLine":5,"endColumn":22},{"ruleId":"120","severity":1,"message":"121","line":11,"column":6,"nodeType":"122","endLine":11,"endColumn":26,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":27,"column":28,"nodeType":"126","messageId":"127","endLine":27,"endColumn":30},{"ruleId":"124","severity":1,"message":"125","line":27,"column":53,"nodeType":"126","messageId":"127","endLine":27,"endColumn":55},{"ruleId":"124","severity":1,"message":"128","line":27,"column":53,"nodeType":"126","messageId":"127","endLine":27,"endColumn":55},{"ruleId":"124","severity":1,"message":"128","line":27,"column":75,"nodeType":"126","messageId":"127","endLine":27,"endColumn":77},{"ruleId":"124","severity":1,"message":"128","line":27,"column":104,"nodeType":"126","messageId":"127","endLine":27,"endColumn":106},{"ruleId":"124","severity":1,"message":"128","line":27,"column":130,"nodeType":"126","messageId":"127","endLine":27,"endColumn":132},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'useRef' is defined but never used.","'Konva' is defined but never used.","'Stage' is defined but never used.","'Layer' is defined but never used.","'Line' is defined but never used.","'uuidv4' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'elementRef.current'. Either exclude it or remove the dependency array. Mutable values like 'elementRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["131"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},"Update the dependencies array to be: []",{"range":"134","text":"135"},[307,327],"[]"]