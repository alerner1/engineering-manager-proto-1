[{"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js":"1","/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js":"2","/home/alyssa/code/projects/engineering-manager-proto-1/src/data.js":"3","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown.js":"4","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js":"5","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/Containers/DropdownsContainer.js":"6","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/Containers/TableContainer.js":"7"},{"size":178,"mtime":1607640931990,"results":"8","hashOfConfig":"9"},{"size":1352,"mtime":1609631480817,"results":"10","hashOfConfig":"9"},{"size":70092,"mtime":1609630350087,"results":"11","hashOfConfig":"9"},{"size":881,"mtime":1609527950930,"results":"12","hashOfConfig":"9"},{"size":8497,"mtime":1609529289310,"results":"13","hashOfConfig":"9"},{"size":1868,"mtime":1609631480817,"results":"14","hashOfConfig":"9"},{"size":313,"mtime":1609631480817,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1xkrzvd",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js",[],["32","33"],"/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js",["34"],"/home/alyssa/code/projects/engineering-manager-proto-1/src/data.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js",["35"],"\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { v4 as uuidv4 } from 'uuid';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryLabel, VictoryStack } from 'victory';\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst TableScreen1 = ({ kpiFilter, unitFilter, data, percentageMetric }) => {\n\n  const [kpiDisplay, setKpiDisplay] = useState(false);\n  const [subdivisionDisplay, setSubdivisionDisplay] = useState(false);\n\n  // can animate these toggles with bootstrap collapse eventually\n  const toggleKPIs = () => {\n    setKpiDisplay(!kpiDisplay);\n  }\n\n  const toggleSubdivisions = () => {\n    setSubdivisionDisplay(!subdivisionDisplay);\n  }\n\n  // could probably do this with hooks bc we need the list for all situations\n  // might also be more effective to take averages as soon as loaded so you can \n  // toggle faster\n  // honestly this whole thing is very inefficient -- we're iterating over the array\n  // way too many times\n  // luckily it's a small array\n  // but find a more efficient way to do it in the long run\n  const mapDivisionRows = () => {\n    const divisionsList = [];\n    let divisionRows = [];\n    for (let row of data) {\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"])\n      }\n    }\n\n    for (let division of divisionsList) {\n      divisionRows.push(getAverages(division))\n    }\n    \n    return mapRows(divisionRows)\n  }\n\n  const getAverages = (division) => {\n    const averagedRow = {\n      \"% Design Errors\": 0,\n      \"% Schedule delays\": 0,\n      \"% Cost overrun\": 0,\n      \"Iterations per design\": 0,\n      \"% Rushed design\": 0,\n      \"Digital design\": 0,\n      \"SME Involvement\": 0,\n      \"Forecasted Risk\": 0\n    };\n    const allRows = data.filter(row => {return row[\"Division\"] === division})\n\n    for (let row of allRows) {\n      for (let key in averagedRow) {\n        averagedRow[key] += row[key];\n      }\n    }\n    \n    for (let key in averagedRow) {\n      averagedRow[key] = Math.round(averagedRow[key]/allRows.length);\n    }\n\n    averagedRow[\"Division\"] = division\n\n    return averagedRow;\n  }\n\n  \n  const mapRows = (rowData) => {\n    if (unitFilter !== \"(All)\") {\n      rowData = rowData.filter(row => {return row[\"Division\"] === unitFilter})\n    }\n\n    const divisionsList = [];\n    return rowData.map((row) => {\n      let flag = false;\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"]);\n        flag = true;\n      }\n\n      return <tr key={uuidv4()}>\n\n        {flag ? <td>{row[\"Division\"]}</td> : <td style={{ border: 'none' }}></td>}\n\n        <td className={subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}>\n          {row[\"Subdivision\"]}\n        </td>\n        <td>\n          {createBar(row[percentageMetric])}\n        </td>\n        <td className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"} style={{ border: 'none' }}></td>\n        <td className={checkIfDisplayed('Iterations per design')}>\n          {row[\"Iterations per design\"]}\n        </td>\n        <td className={checkIfDisplayed('% Rushed design')}>\n          {row[\"% Rushed design\"]}\n        </td>\n        <td className={checkIfDisplayed('Digital design')}>\n          {row[\"Digital design\"]}\n        </td>\n        <td className={checkIfDisplayed('SME Involvment')}>\n          {row[\"SME Involvement\"]}\n        </td>\n        <td className={kpiDisplay ? \"toggle-display in\" : \"toggle-display\"} ></td>\n        <td>\n          {forecastRisk(row[\"Forecasted Risk\"])}\n        </td>\n      </tr>\n    })\n  }\n\n  const forecastRisk = (dataPoint) => {\n    let color = \"green\";\n    if (dataPoint === 2) {\n      color = \"#E0BA3E\";\n    } else if (dataPoint === 3) {\n      color = \"red\";\n    }\n\n    const formattedData = [{ x: 0, y: 100 }]\n\n    return <VictoryChart maxDomain={{ y: 100 }} horizontal height={10} width={100} padding={{ top: 10, bottom: 10 }}>\n      <VictoryBar\n        style={{ data: { fill: color, width: 20 }, labels: { fill: \"transparent\" } }}\n        data={formattedData}\n        labels={({ datum }) => (`${datum.y}`)}\n      />\n      <VictoryAxis\n        style={{\n          axis: { stroke: \"transparent\" },\n          ticks: { stroke: \"transparent\" },\n          tickLabels: { fill: \"transparent\" }\n        }}\n      />\n      <VictoryAxis\n        dependentAxis\n        style={{\n          axis: { stroke: \"transparent\" },\n          tick: { stroke: \"transparent\" },\n          tickLabels: { fill: \"transparent\" }\n        }}\n      />\n    </VictoryChart>\n  }\n\n  const checkIfDisplayed = (column) => {\n    if (!kpiDisplay) {\n      return \"toggle-display\";\n    }\n    else {\n      if (kpiFilter !== '(All)') {\n        if (kpiFilter === column) {\n          return \"toggle-display in\";\n        } else {\n          return \"toggle-display\";\n        }\n      }\n    }\n  }\n\n  const createBar = (dataPoint) => {\n    const formattedData = [{ x: 0, y: dataPoint }];\n\n    let color = \"green\";\n    if (dataPoint > 33 && dataPoint < 67) {\n      color = \"#E0BA3E\";\n    } else if (dataPoint > 67) {\n      color = \"red\";\n    }\n\n    return (\n\n      <VictoryChart maxDomain={{ y: 100 }} horizontal height={10} width={100} padding={{ top: 2, bottom: 8 }}>\n        <VictoryStack\n          style={{ labels: { fill: \"white\", fontSize: 4 } }}\n        >\n          <VictoryBar\n            cornerRadius={{ bottomLeft: 2, bottomRight: 2 }}\n            style={{ data: { fill: color, width: 4, stroke: \"gray\", strokeWidth: 0.5 } }}\n            data={formattedData}\n            labels={() => (`${dataPoint}%`)}\n            labelComponent={\n              <VictoryLabel x={dataPoint} dx={dataPoint * 0.01} textAnchor=\"middle\" verticalAnchor=\"middle\" />\n            }\n          />\n          <VictoryBar\n            cornerRadius={2}\n            style={{ data: { fill: \"darkslategray\", width: 4, stroke: \"gray\", strokeWidth: 0.5 } }}\n            data={[{ x: 0, y: 100 - dataPoint }]}\n          />\n        </VictoryStack>\n        <VictoryAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            ticks: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n          tickValues={[0]}\n          tickCount={1}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            tick: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n        />\n      </VictoryChart>\n    );\n  }\n\n  return (\n    <Table>\n      {/* this is also a mess, try to fix */}\n      <thead>\n        <tr>\n          <th style={{ width: '12%' }}>\n            {/* hover/click thing is a little messed up, try to fix */}\n          <div className=\"hover-hand\" onClick={() => toggleSubdivisions()}>\n            Division &nbsp;\n            {subdivisionDisplay ? <FontAwesomeIcon className=\"hover-hand\" icon=\"minus-circle\" /> : <FontAwesomeIcon className=\"hover-hand\" icon=\"plus-circle\" />}\n            </div>\n          </th>\n          <th className={subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}>\n            Subdivision\n          </th>\n          <th style={{ width: \"50%\" }}>\n            {percentageMetric}\n          </th>\n          <th style={{ width: \"15%\" }} className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"}>\n            <Button style={{backgroundColor: \"transparent\", border: \"2px solid white\"}} className={kpiDisplay ? \"toggle-display\" : \"toggle-display in\"} onClick={toggleKPIs}>Display design performance KPIs <FontAwesomeIcon icon=\"plus-circle\" /></Button>\n          </th>\n          <th className={checkIfDisplayed('Iterations per design')}>\n            Iterations per design\n          </th>\n          <th className={checkIfDisplayed('% Rushed design')}>\n            Rushed design\n          </th>\n          <th className={checkIfDisplayed('Design digitization')}>\n            Design digitization\n          </th>\n          <th className={checkIfDisplayed('SME involvement')}>\n            SME involvement \n          </th>\n          <th className={kpiDisplay ? \"toggle-display in\" : \"toggle-display\"}><FontAwesomeIcon className=\"hover-hand\" onClick={() => toggleKPIs()} icon=\"minus-circle\" /></th>\n          <th style={{ width: \"7%\" }}>\n            Forecasted risk\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {subdivisionDisplay ? mapRows(data) : mapDivisionRows()}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableScreen1;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/Containers/DropdownsContainer.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/Containers/TableContainer.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":4,"column":26,"nodeType":"42","messageId":"43","endLine":4,"endColumn":35},{"ruleId":"40","severity":1,"message":"41","line":6,"column":27,"nodeType":"42","messageId":"43","endLine":6,"endColumn":36},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]