[{"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js":"1","/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js":"2","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js":"3","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/Screen1Container.js":"4","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/DropdownsContainer1.js":"5","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/TableContainer1.js":"6","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown1.js":"7","/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen1.js":"8","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/Screen2Container.js":"9","/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen2.js":"10","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/DropdownsContainer2.js":"11","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/DisplayDropdown2.js":"12","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/TableContainer2.js":"13","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TableScreen2.js":"14","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/Triangles.js":"15","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Containers/Screen3Container.js":"16","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PartInfo.js":"17","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewProcess.js":"18","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskAlerts.js":"19","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PredictedRisk.js":"20","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/WorkflowsExecuted.js":"21","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/SuggestedActions.js":"22","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskBar.js":"23","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewChart.js":"24","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/EllipsePoint.js":"25","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/PercentageMetricBar.js":"26","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TopTriangleIcon.js":"27","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/BottomTriangleIcon.js":"28","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/Screen4Container.js":"29","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/DropdownsContainer4.js":"30","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/DisplayDropdown4.js":"31","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/TableContainer4.js":"32","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/TableScreen4.js":"33","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/PredictedRiskRectangle.js":"34","/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Containers/TrendsPageContainer.js":"35","/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Containers/TrendsDropdownsContainer.js":"36","/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Components/TrendsDropdowns.js":"37"},{"size":272,"mtime":1609632473127,"results":"38","hashOfConfig":"39"},{"size":3699,"mtime":1612382481480,"results":"40","hashOfConfig":"39"},{"size":7479,"mtime":1611341155310,"results":"41","hashOfConfig":"39"},{"size":1201,"mtime":1609880454097,"results":"42","hashOfConfig":"39"},{"size":2016,"mtime":1611341155310,"results":"43","hashOfConfig":"39"},{"size":326,"mtime":1609631630637,"results":"44","hashOfConfig":"39"},{"size":883,"mtime":1609873569707,"results":"45","hashOfConfig":"39"},{"size":17737,"mtime":1612286634420,"results":"46","hashOfConfig":"39"},{"size":1178,"mtime":1609890216147,"results":"47","hashOfConfig":"39"},{"size":231389,"mtime":1609633249047,"results":"48","hashOfConfig":"39"},{"size":2345,"mtime":1611341155310,"results":"49","hashOfConfig":"39"},{"size":807,"mtime":1609634482367,"results":"50","hashOfConfig":"39"},{"size":302,"mtime":1609634741567,"results":"51","hashOfConfig":"39"},{"size":2442,"mtime":1609881144287,"results":"52","hashOfConfig":"39"},{"size":1432,"mtime":1609888539937,"results":"53","hashOfConfig":"39"},{"size":1100,"mtime":1609871098507,"results":"54","hashOfConfig":"39"},{"size":1633,"mtime":1609802177767,"results":"55","hashOfConfig":"39"},{"size":1844,"mtime":1609901448707,"results":"56","hashOfConfig":"39"},{"size":1922,"mtime":1609800065987,"results":"57","hashOfConfig":"39"},{"size":1380,"mtime":1611460927080,"results":"58","hashOfConfig":"39"},{"size":1341,"mtime":1609790599737,"results":"59","hashOfConfig":"39"},{"size":1404,"mtime":1609790596637,"results":"60","hashOfConfig":"39"},{"size":1342,"mtime":1610315713580,"results":"61","hashOfConfig":"39"},{"size":5668,"mtime":1611460954970,"results":"62","hashOfConfig":"39"},{"size":355,"mtime":1609821317727,"results":"63","hashOfConfig":"39"},{"size":2004,"mtime":1610316427820,"results":"64","hashOfConfig":"39"},{"size":443,"mtime":1609891183757,"results":"65","hashOfConfig":"39"},{"size":449,"mtime":1609891337687,"results":"66","hashOfConfig":"39"},{"size":1900,"mtime":1611341155320,"results":"67","hashOfConfig":"39"},{"size":860,"mtime":1611341155320,"results":"68","hashOfConfig":"39"},{"size":656,"mtime":1611341155320,"results":"69","hashOfConfig":"39"},{"size":185,"mtime":1611341155320,"results":"70","hashOfConfig":"39"},{"size":2179,"mtime":1612294476690,"results":"71","hashOfConfig":"39"},{"size":904,"mtime":1612294091240,"results":"72","hashOfConfig":"39"},{"size":372,"mtime":1612383094970,"results":"73","hashOfConfig":"39"},{"size":1175,"mtime":1612383016820,"results":"74","hashOfConfig":"39"},{"size":615,"mtime":1612382657800,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1xkrzvd",{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alyssa/code/projects/engineering-manager-proto-1/src/index.js",[],["165","166"],"/home/alyssa/code/projects/engineering-manager-proto-1/src/App.js",["167","168","169","170"],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/TableScreen1.js",["171","172","173","174","175","176","177"],"\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { v4 as uuidv4 } from 'uuid';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryLabel, VictoryStack } from 'victory';\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\nimport PercentageMetricBar from './PercentageMetricBar';\n\nconst TableScreen1 = ({ kpiFilter, unitFilter, data, percentageMetric }) => {\n  const history = useHistory();\n\n  const [kpiDisplay, setKpiDisplay] = useState(false);\n  const [subdivisionDisplay, setSubdivisionDisplay] = useState(false);\n\n  useEffect(() => {\n    console.log(kpiDisplay)\n  }, [kpiDisplay])\n\n  // can animate these toggles with bootstrap collapse eventually\n  const toggleKPIs = () => {\n    setKpiDisplay(!kpiDisplay);\n  }\n\n  const toggleSubdivisions = () => {\n    setSubdivisionDisplay(!subdivisionDisplay);\n  }\n\n  // could probably do this with hooks bc we need the list for all situations\n  // might also be more effective to take averages as soon as loaded so you can \n  // toggle faster\n  // honestly this whole thing is very inefficient -- we're iterating over the array\n  // way too many times\n  // luckily it's a small array\n  // but find a more efficient way to do it in the long run\n  const mapDivisionRows = () => {\n    const divisionsList = [];\n    let divisionRows = [];\n    for (let row of data) {\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"])\n      }\n    }\n\n    for (let division of divisionsList) {\n      divisionRows.push(getAverages(division))\n    }\n    \n    return mapRows(divisionRows)\n  }\n\n  const getAverages = (division) => {\n    const averagedRow = {\n      \"% Design Errors\": 0,\n      \"% Schedule delays\": 0,\n      \"% Cost overrun\": 0,\n      \"Iterations per design\": 0,\n      \"% Rushed design\": 0,\n      \"Design digitization\": 0,\n      \"SME involvement\": 0,\n      \"Predicted Design Errors\": 0\n    };\n    const allRows = data.filter(row => {return row[\"Division\"] === division})\n\n    for (let row of allRows) {\n      for (let key in averagedRow) {\n        averagedRow[key] += row[key];\n      }\n    }\n    \n    for (let key in averagedRow) {\n      averagedRow[key] = Math.round(averagedRow[key]/allRows.length);\n    }\n\n    averagedRow[\"Division\"] = division\n\n    return averagedRow;\n  }\n\n  const redirectScreen2 = (subdivisionName) => {\n    history.push(`/subdivisions/${subdivisionName}`)\n  }\n\n  const redirectScreen4 = (event, subdivisionName) => {\n    event.preventDefault();\n    history.push(`/design_errors/${subdivisionName}`)\n  }\n\n  \n  const mapRows = (rowData) => {\n    if (unitFilter !== \"(All)\") {\n      rowData = rowData.filter(row => {return row[\"Division\"] === unitFilter})\n    }\n\n    const divisionsList = [];\n    return rowData.map((row) => {\n      let flag = false;\n      if (!divisionsList.includes(row[\"Division\"])) {\n        divisionsList.push(row[\"Division\"]);\n        flag = true;\n      }\n\n      return <tr key={uuidv4()}>\n\n        {flag ? <td className=\"division-cell font-small small-padding \">{row[\"Division\"]}</td> : <td className=\"font-small\" style={{ border: 'none' }}></td>}\n\n        <td onClick={event => redirectScreen2(event.target.innerText)} className={`hover-hand font-small small-padding ${subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}`}>\n          {row[\"Subdivision\"]}\n        </td>\n        <td className=\"small-padding\">\n          {<PercentageMetricBar dataPoint={row[percentageMetric]} />}\n        </td>\n        <td className={`small-padding ${kpiDisplay ? \"toggle-display\" : \"toggle-display in\"}`} style={{ border: 'none' }}></td>\n        <td className={`small-padding text-center ${checkIfDisplayed('Iterations per design')}`}>\n          {row[\"Iterations per design\"]}\n        </td>\n        <td className={`small-padding text-center ${checkIfDisplayed('% Rushed design')}`}>\n          {row[\"% Rushed design\"]}\n        </td>\n        <td className={`small-padding text-center ${checkIfDisplayed('Design digitization')}`}>\n          {row[\"Design digitization\"]}\n        </td>\n        <td className={`small-padding text-center ${checkIfDisplayed('SME involvement')}`}>\n          {row[\"SME involvement\"]}\n        </td>\n        <td className={kpiDisplay ? \"toggle-display in\" : \"toggle-display\"} ></td>\n        <td className=\"small-padding text-center\">\n          {\n            subdivisionDisplay ? \n            <a onClick={event => redirectScreen4(event, row[\"Subdivision\"])} href=\"\">{row[\"Predicted Design Errors\"]}</a>\n            :\n            <a onClick={event => redirectScreen4(event, row[\"Division\"])} href=\"\">{row[\"Predicted Design Errors\"]}</a>\n          }\n        </td>\n      </tr>\n    })\n  }\n\n  const checkIfDisplayed = (column) => {\n    if (!kpiDisplay) {\n      return \"toggle-display\";\n    }\n    else {\n      if (kpiFilter !== '(All)') {\n        if (kpiFilter === column) {\n          return \"toggle-display in\";\n        } else {\n          return \"toggle-display\";\n        }\n      }\n    }\n  }\n\n\n  return (\n    <Table>\n      {/* this is also a mess, try to fix */}\n      <thead>\n        <tr>\n          <th style={{ width: '12%' }} className=\"small-padding\">\n            <div className=\"hover-hand font-small\" onClick={() => toggleSubdivisions()}>\n              Division &nbsp;\n              {subdivisionDisplay ? <FontAwesomeIcon className=\"hover-hand\" icon=\"minus-circle\" /> : <FontAwesomeIcon className=\"hover-hand\" icon=\"plus-circle\" />}\n            </div>\n          </th>\n          <th style={{ width: '20%' }} className={`font-small small-padding ${subdivisionDisplay ? \"toggle-display in\" : \"toggle-display\"}`}>\n            Subdivision\n          </th>\n          <th className=\"font-small small-padding\">\n            {percentageMetric}\n          </th>\n          <th style={{ width: \"15%\" }} className={`font-small small-padding ${kpiDisplay ? \"toggle-display\" : \"toggle-display in\"}`}>\n            <Button style={{color: \"midnightblue\", backgroundColor: \"transparent\", border: \"2px solid lightgray\"}} className={`p-1 font-small ${kpiDisplay ? \"toggle-display\" : \"toggle-display in\"}`} onClick={toggleKPIs}>Display design performance KPIs <FontAwesomeIcon icon=\"plus-circle\" /></Button>\n          </th>\n          <th style={{width: '7%'}} className={`font-small small-padding ${checkIfDisplayed('Iterations per design')}`}>\n            Iterations per design\n          </th>\n          <th style={{width: '7%'}} className={`font-small small-padding ${checkIfDisplayed('% Rushed design')}`}>\n            Rushed design\n          </th>\n          <th style={{width: '7%'}} className={`font-small small-padding ${checkIfDisplayed('Design digitization')}`}>\n            Design digitization\n          </th>\n          <th style={{width: '7%'}} className={`font-small small-padding ${checkIfDisplayed('SME involvement')}`}>\n            SME involvement \n          </th>\n          <th style={{width: '2%'}} className={`font-small small-padding ${kpiDisplay ? \"toggle-display in\" : \"toggle-display\"}`}><FontAwesomeIcon className=\"hover-hand\" onClick={() => toggleKPIs()} icon=\"minus-circle\" /></th>\n          <th className=\"font-small small-padding\" style={{ width: \"7%\" }}>\n            Predicted Design Errors\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {subdivisionDisplay ? mapRows(data) : mapDivisionRows()}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableScreen1;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/Screen1Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/DropdownsContainer1.js",["178"],"import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport DisplayDropdown1 from '../Components/DisplayDropdown1';\nimport {v4 as uuidv4} from 'uuid';\nimport { dataScreen1 } from '../../dataScreen1';\n\nconst DropdownsContainer1 = ({ kpiFilter, unitFilter, handleFilter, percentageMetric, onPercentageMetricChange}) => {\n  const mapDropdowns = () => {\n    return dropdownsList.map((dropdown) => <DisplayDropdown1 kpiFilter={kpiFilter} handleFilter={handleFilter} unitFilter={unitFilter} key={uuidv4()} info={dropdown}  />);\n  }\n\n \n\n  return(\n    <Row>\n      {mapDropdowns()}\n      <Col xs={3}>\n      </Col>\n      <Col>\n        {/* <Form onChange={event => onPercentageMetricChange(event.target.value)}>\n          <div key=\"default-radio\" className=\"mb-3\">\n            <Form.Check className=\"font-small\" type=\"radio\" checked={percentageMetric === \"% Design Errors\"} id=\"design-errors\" label=\"% Design errors\" value=\"% Design Errors\" />\n            <Form.Check className=\"font-small\" type=\"radio\" checked={percentageMetric === \"% Schedule delays\"} id=\"schedule-delays\" label=\"% Schedule delays\" value=\"% Schedule delays\" />\n            <Form.Check className=\"font-small\" type=\"radio\" checked={percentageMetric === \"% Cost overrun\"} id=\"cost-overrun\" label=\"% Cost overrrun\" value=\"% Cost overrun\" />\n          </div>\n        </Form> */}\n      </Col>\n    </Row>\n  );\n};\n\nexport default DropdownsContainer1;\n\n\nconst mapDivisions = () => {\n  const divisionsList = ['(All)'];\n  for (let row of dataScreen1) {\n    if (!divisionsList.includes(row[\"Division\"])) {\n      divisionsList.push(row[\"Division\"])\n    }\n  }\n  return divisionsList;\n}\n\nconst dropdownsList = [\n  {\n    title: \"Select KPIs to display\",\n    options: [\n      \"(All)\",\n      \"Iterations per design\",\n      \"% Rushed design\",\n      \"Design digitization\",\n      \"SME involvement\"\n    ]\n  },\n  {\n    title: \"Filter on business unit\",\n    options: mapDivisions()\n  }\n];","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Containers/TableContainer1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/DisplayDropdown1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen1.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/Screen2Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/dataScreen2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/DropdownsContainer2.js",["179"],"import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport DisplayDropdown2 from '../Components/DisplayDropdown2';\nimport {v4 as uuidv4} from 'uuid';\nimport TopTriangleIcon from '../Components/TopTriangleIcon';\nimport BottomTriangleIcon from '../Components/BottomTriangleIcon';\n\nconst DropdownsContainer2 = ({ productFilter, handleFilter, percentageMetric, onPercentageMetricChange}) => {\n  const mapDropdowns = () => {\n    return dropdownsList.map((dropdown) => <DisplayDropdown2 productFilter={productFilter} handleFilter={handleFilter} key={uuidv4()} info={dropdown}  />);\n  }\n\n \n\n  return(\n    <Row className=\"d-flex justify-content-between\">\n      {mapDropdowns()}\n      <Col xs={7}>\n      </Col>\n      <Col>\n        <Row>\n          <Col>\n            {/* <Form onChange={event => onPercentageMetricChange(event.target.value)}>\n              <div key=\"default-radio\" className=\"mb-3\">\n                <Form.Check type=\"radio\" className=\"font-small\" checked={percentageMetric === \"% Design Errors\"} id=\"design-errors\" label=\"% Design errors\" value=\"% Design Errors\" />\n                <Form.Check type=\"radio\" className=\"font-small\"  checked={percentageMetric === \"% Schedule delays\"} id=\"schedule-delays\" label=\"% Schedule delays\" value=\"% Schedule delays\" />\n                <Form.Check type=\"radio\" className=\"font-small\"  checked={percentageMetric === \"% Cost overrun\"} id=\"cost-overrun\" label=\"% Cost overrrun\" value=\"% Cost overrun\" />\n              </div>\n            </Form> */}\n          </Col>\n        </Row>\n        <Row noGutters className=\"mt-3 m-0\">\n          <Col xs={1}>\n            <TopTriangleIcon />\n          </Col>\n          <Col className=\"font-small\">\n            &nbsp;&nbsp;&nbsp; Design errors\n          </Col>\n        </Row>\n        <Row noGutters className=\"m-0\">\n        <Col xs={1}>\n            <BottomTriangleIcon />\n          </Col>\n          <Col className=\"font-small\">\n            &nbsp;&nbsp;&nbsp; Schedule delays\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default DropdownsContainer2;\n\nconst dropdownsList = [\n  {\n    title: \"Select Product?\",\n    options: [\n      \"(All)\",\n      \"Product 1\",\n      \"Product 2\",\n      \"Product 3\",\n      \"Product 4\",\n      \"Product 5\"\n    ]\n  },\n];","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/DisplayDropdown2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Containers/TableContainer2.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TableScreen2.js",["180","181","182","183","184","185","186","187","188"],"import React, { useEffect, useState, useRef } from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Line } from 'react-konva';\nimport Table from 'react-bootstrap/Table';\nimport { v4 as uuidv4 } from 'uuid';\nimport Triangles from './Triangles';\nimport EllipsePoint from '../../Screen3/Components/EllipsePoint';\n\nconst TableScreen2 = ({ productFilter, data, percentageMetric }) => {\n    \n  // ok this is dumb you know all the products and departments just set them manually\n  // if you have to do it programmatically later you can do that with the help of a solid backend\n\n  const checkIfDisplayed = (product) => {\n    if (productFilter !== '(All)') {\n      if (productFilter === product) {\n        return \"toggle-display in\";\n      } else {\n        return \"toggle-display\";\n      }\n    }\n  }\n\n  const mapRow = (product) => {\n    const thisProduct = data.filter(row => {return row[\"Product\"] === product});\n    thisProduct.sort((a, b) => (a[\"Department\"] > b[\"Department\"]) ? 1 : -1)\n    return thisProduct.map(row => <td className={checkIfDisplayed(product)}><Triangles row={row} /></td>)\n  }\n\n  return(\n    <Table>\n      <thead>\n        <th>\n          \n        </th>\n        <th style={{width: '17%'}}>\n          Body design\n        </th>\n        <th style={{width: '17%'}}>\n          Electronic systems\n        </th>\n        <th style={{width: '17%'}}>\n          Interior design\n        </th>\n        <th style={{width: '17%'}}>\n          Production engineering\n        </th>\n        <th style={{width: '17%'}}>\n          Vehicle performance development\n        </th>\n      </thead>\n      <tbody>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 1\")}>\n            Product 1\n          </th>\n          {mapRow(\"Product 1\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 2\")}>\n            Product 2\n          </th>\n          {mapRow(\"Product 2\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 3\")}>\n            Product 3\n          </th>\n          {mapRow(\"Product 3\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 4\")}>\n            Product 4\n          </th>\n          {mapRow(\"Product 4\")}\n        </tr>\n        <tr>\n          <th className={checkIfDisplayed(\"Product 5\")}>\n            Product 5\n          </th>\n          {mapRow(\"Product 5\")}\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableScreen2;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/Triangles.js",["189","190","191","192","193","194","195"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst Triangles = ({row}) => {\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    setWidth(elementRef.current.attrs.container.offsetWidth);\n\n  }, [elementRef.current]);\n\n  const getColor = (value) => {\n    if (value > 67) {\n      return '#DF2935';\n    } else if (value > 33) {\n      return '#EFEA5A';\n    } else {\n      return '#0DAB76';\n    }\n  };\n\n  const getStrokeColor = () => {\n    const topColor = getColor(row[\"% Schedule delays\"]);\n    const bottomColor = getColor(row[\"% Design Errors\"]);\n\n    if (topColor === '#DF2935' && bottomColor === '#DF2935' || topColor === '#DF2935' && bottomColor === '#EFEA5A' || topColor === '#EFEA5A' && bottomColor === '#DF2935') {\n      return '#A01821';\n    } else {\n      return 'lightgray';\n    }\n  };\n\n  const triangleWidth = width/2\n  const rectWidth = width\n\n  return(\n    <Stage ref={elementRef} width={rectWidth} height={40}>\n      <Layer>\n        <Line closed points={[5, 2, triangleWidth + 2, 2, triangleWidth + 2, 38]} fill={getColor(row[\"% Schedule delays\"])} stroke={getStrokeColor()} strokeWidth={2} />\n        <Line closed points={[2, 2, 2, 38, triangleWidth - 2, 38]} fill={getColor(row[\"% Design Errors\"])} stroke={getStrokeColor()} strokeWidth={2} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default Triangles;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Containers/Screen3Container.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PartInfo.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewProcess.js",["196","197"],"import Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport DesignReviewChart from './DesignReviewChart';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst DesignReviewProcess = () => {\n  return(\n    <Card className=\"h-100\">\n      <Card.Body className=\"p-2\">\n        <Card.Title>\n          <Row noGutters>\n            <Col xs={8}>\n              Design and review process\n            </Col>\n            <Col className=\"font-xs\" style={{color: 'midnightblue'}}>\n              <FontAwesomeIcon style={{color: '#DF2935'}} icon=\"circle\" /> Approved\n              <br />\n              <FontAwesomeIcon style={{color: '#EFEA5A'}} icon=\"circle\" /> Conditional Approval\n              <br />\n              <FontAwesomeIcon style={{color: '#0DAB76'}} icon=\"circle\" /> Not approved\n            </Col>\n          </Row>\n        </Card.Title>\n        <Card.Text>\n          <DesignReviewChart />\n          <Card.Title>\n              Review comment excerpts\n          </Card.Title>\n          <Card.Text>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item className=\"font-italic font-small small-padding\">\n                \"I'm not sure this part will fit into the thermal requirements\"\n              </ListGroup.Item>\n              <ListGroup.Item className=\"font-italic font-small small-padding\">\n                \"We should set a meeting with the Subject Matter Experts but I'm not sure there's enough time before the deadline\"\n              </ListGroup.Item>\n            </ListGroup>\n          </Card.Text>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default DesignReviewProcess;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskAlerts.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/PredictedRisk.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/WorkflowsExecuted.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/SuggestedActions.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/RiskBar.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/DesignReviewChart.js",["198"],"import React, { useEffect, useState, useRef } from 'react';\nimport { VictoryChart, VictoryScatter, VictoryLine, VictoryAxis, VictoryBar, VictoryStack, VictoryLabel } from 'victory';\n\nconst DesignReviewChart = () => {\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    setWidth(elementRef.current.offsetWidth)\n  }, [elementRef.current]);\n\n  return(\n    <div ref={elementRef}>\n\n    <VictoryChart \n      horizontal \n      maxDomain={{ x: 4.5, y: 150 }} \n      minDomain={{ x: 1.5, y: 0 }}\n      height={width/5}\n      width={width}\n      padding={{top: 1, bottom: 40, left: 55, right: 20}}\n      >\n      <VictoryStack>\n        <VictoryBar \n        data={[{ x: 3, y: 58 }]}\n        style={{\n          data: {fill: 'deepskyblue', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 20}]}\n        style={{\n          data: {fill: 'transparent', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 18}]}\n        style={{\n          data: {fill: 'deepskyblue', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 6}]}\n        style={{\n          data: {fill: 'transparent', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 2}]}\n        style={{\n          data: {fill: 'deepskyblue', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 6}]}\n        style={{\n          data: {fill: 'transparent', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 2}]}\n        style={{\n          data: {fill: 'deepskyblue', width: width/30}\n        }}\n        />\n        <VictoryBar \n        data={[{ x: 3, y: 8}]}\n        style={{\n          data: {fill: 'transparent', width: width/30}\n        }}\n        />\n      </VictoryStack>\n      <VictoryScatter \n        data={[{ x: 2, y: 60 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 65 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 70 }]}\n        style={{ data: { fill: \"#EFEA5A\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 75 }]}\n        style={{ data: { fill: \"#DF2935\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 96 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 98 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 100 }]}\n        style={{ data: { fill: \"#EFEA5A\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 101 }]}\n        style={{ data: { fill: \"#DF2935\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 106 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 107 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 108 }]}\n        style={{ data: { fill: \"#EFEA5A\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 109 }]}\n        style={{ data: { fill: \"#DF2935\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 114 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 115 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 116 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryScatter \n        data={[{ x: 2, y: 117 }]}\n        style={{ data: { fill: \"#0DAB76\", stroke: \"lightgray\", strokeWidth: 1 } }}\n        size={width/70}\n      />\n      <VictoryLine \n        data={[\n          {x: 1.5, y: 120},\n          {x: 3.5, y: 120}\n        ]}\n        style={{labels: {fontSize: 10}}}\n        labels={({datum}) => {if (datum.x === 3.5) return \"System release deadline\"}}\n        labelComponent={\n          <VictoryLabel textAnchor=\"middle\" dy={-10} />\n        }\n      />\n      <VictoryAxis \n        dependentAxis \n        tickValues={[1, 60, 120]} \n        tickFormat={(tick) => {\n          if (tick === 1) {\n            return 'January 1';\n          } else if (tick === 60) {\n            return 'March 1';\n          } else if (tick === 120) {\n            return 'May 1'\n          }\n        }}\n      />\n      <VictoryAxis\n        \n        style={{\n          axis: {stroke: 'transparent'}\n        }}\n        tickValues={[2, 3]} \n        tickFormat={(tick) => {\n          if (tick === 2) {\n            return 'Review';\n          } else if (tick === 3) {\n            return 'Design';\n          }\n        }}\n        />\n    </VictoryChart>\n    </div>\n  );\n};\n\nexport default DesignReviewChart;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen3/Components/EllipsePoint.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen1/Components/PercentageMetricBar.js",["199"],"import { VictoryChart, VictoryAxis, VictoryBar, VictoryStack, VictoryLabel } from 'victory';\nimport React, { useRef, useState, useEffect} from 'react';\n\nconst PercentageMetricBar = ({ dataPoint }) => {\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    setWidth(elementRef.current.offsetWidth)\n  }, [elementRef.current]);\n\n  const formattedData = [{ x: 0, y: dataPoint }];\n\n  let color = \"#0DAB76\";\n  if (dataPoint > 33 && dataPoint < 67) {\n    color = \"#EFEA5A\";\n  } else if (dataPoint > 67) {\n    color = \"#DF2935\";\n  }\n\n  return (\n    <div ref={elementRef}>\n      <VictoryChart \n        maxDomain={{ x: 2, y: 100 }} \n        horizontal \n        height={width/20} \n        width={width} \n        padding={{top: width/40, bottom: width/40, left: 0, right: 0}}\n      >\n        <VictoryStack\n          style={{ labels: { fill: \"midnightblue\", fontSize: '.8rem' } }}\n        >\n          <VictoryBar\n            style={{ data: { fill: color, width: width/30 } }}\n            data={formattedData}\n            labels={() => (`${dataPoint}%`)}\n            labelComponent={\n              <VictoryLabel x={(dataPoint/100 * width)} dx={dataPoint * .05} textAnchor=\"middle\" verticalAnchor=\"middle\" />\n            }\n          />\n          <VictoryBar\n            style={{ data: { fill: \"whitesmoke\", width: width/30 } }}\n            data={[{ x: 0, y: 100 - dataPoint }]}\n          />\n        </VictoryStack>\n        <VictoryAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            ticks: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n          tickValues={[0]}\n          tickCount={1}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            axis: { stroke: \"transparent\" },\n            tick: { stroke: \"transparent\" },\n            tickLabels: { fill: \"transparent\" }\n          }}\n        />\n      </VictoryChart>\n    </div>\n  );\n};\n\nexport default PercentageMetricBar;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/TopTriangleIcon.js",["200","201","202","203"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line, Text } from 'react-konva';\n\nconst TopTriangleIcon = () => {\n  return(\n    <Stage\n      width={20}\n      height={20}\n      // padding={{top: 10, bottom: 10}}\n    >\n      <Layer>\n        <Line \n          closed\n          fill=\"#DF2935\"\n          points={[0, 0, 20, 0, 20, 20]}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default TopTriangleIcon;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen2/Components/BottomTriangleIcon.js",["204","205","206","207"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line, Text } from 'react-konva';\n\nconst BottomTriangleIcon = () => {\n  return(\n    <Stage\n      width={20}\n      height={20}\n      // padding={{top: 10, bottom: 10}}\n    >\n      <Layer>\n        <Line \n          closed\n          fill=\"#0DAB76\"\n          points={[0, 0, 0, 20, 20, 20]}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default BottomTriangleIcon;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/Screen4Container.js",["208"],"import React from 'react';\nimport DropdownsContainer4 from './DropdownsContainer4';\nimport TableContainer4 from './TableContainer4';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst Screen4Container = () => {\n  // this width thing is completely absolutely essential but also totally messed up\n  // fix it so it's responsive and looks good in more than just screenshots\n\n  return(\n    <Row  style={{width: '75vw'}}>\n      <Col xs={12}>\n        <div className=\"pt-2 px-3 d-block mx-auto w-100\">\n          <DropdownsContainer4 />\n        </div>\n        <div className=\"pt-2 px-3 d-block mx-auto w-100\">\n          <TableContainer4 />\n        </div>\n      </Col>\n    </Row>\n  )\n};\n\nexport default Screen4Container;\n// so here we have screen 4\n// if we're given a division, just display all parts for entire division\n// if subdivision, display for only that subdivision\n// otherwise it's weird because default screen doesn't have the links to screen 4\n// since subdivs aren't displayed by default\n\n// [product line dropdown] [severity dropdown] [time frame (dropdown? not sure what this is exactly)]\n\n// table\n// part | risk alerts (#) | blockers (#? str?) | process deviations (#)\n\n// ok we can easily generate this data right?\n\n// when you click on a subdivision\n// show 50 parts. \n// first 10 assigned to product line 1, next to product line 2, and so on\n// each with risk alerts and blockers and process devs set to a random number between 1 and 30. \n\n// when you click on a division\n// show 150 parts (or # of subdivisions * 50)\n// 50 per subdivision\n\n\n// you know what's REALLY missing from this screen? you have no idea where you are.\n// you need to show which subdivision you're looking at or whatever.\n\n\n\n// anyway... for now. for tomorrow. all we need is one lousy screen to share. clicking doesn't even have to work.","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/DropdownsContainer4.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/DisplayDropdown4.js",["209"],"import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport {v4 as uuidv4} from 'uuid';\n\nconst DisplayDropdown4 = ({ info }) => {\n  const mapOptions = () => {\n    return info.options.map(option => <option key={uuidv4()}>{option}</option>);\n  }\n\n  return(\n    <Form.Group controlId={info.title}>\n      <Form.Label>{info.title}</Form.Label>\n      {/* this system only works well for two dropdowns\n      if adding more use a switch function or something */}\n      <Form.Control size=\"sm\" as=\"select\">\n        {mapOptions()}\n      </Form.Control>\n    </Form.Group>\n  );\n};\n\nexport default DisplayDropdown4;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Containers/TableContainer4.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/TableScreen4.js",["210"],"import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport PredictedRiskRectangle from './PredictedRiskRectangle';\n\nconst TableScreen4 = () => {\n  const history = useHistory();\n\n  const sendToPartsScreen = (e) => {\n    e.preventDefault();\n    history.push('/parts')\n  }\n\n  const mapRows = () => {\n    const rows = [];\n    for (let i = 1; i < 51; i++) {\n      rows.push(\n        <tr>\n          <td>\n            <a onClick={e => sendToPartsScreen(e)} href=\"\">Part {i}</a>\n          </td>\n          <td>\n            {rand10()}\n          </td>\n          <td>\n            {rand10()}\n          </td>\n          <td>\n            <PredictedRiskRectangle color={rectColor(rand10())} />\n          </td>\n        </tr>)\n\n    }\n    \n    // sorts by color then by part number\n    // when you change the part numbers to actually have names, sort by full name alphabetical order instead\n    // or this whole sort might not even be necessary if you have the actual numbers in advance rather than randomly generating them in real time\n    rows.sort((a, b) => (a.props.children[3].props.children.props.color < b.props.children[3].props.children.props.color) ? 1 : (a.props.children[3].props.children.props.color === b.props.children[3].props.children.props.color) ? ((a.props.children[0].props.children.props.children[1] > b.props.children[0].props.children.props.children[1]) ? 1 : -1 ) : -1);\n    \n    return rows.map(row => {console.log(row.props.children[0].props.children.props.children[1]); return row});\n  }\n\n  const rand10 = () => {\n    return Math.floor(Math.random() * 10) + 1\n  }\n\n  const rectColor = (risk) => {\n    if (risk >= 7) {\n      return 4;\n    } else if (risk >= 5) {\n      return 3;\n    } else if (risk >= 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  }\n\n  return(\n    <Table>\n      <thead>\n        <th>\n          Part\n        </th>\n        <th>\n          Risk Alerts\n        </th>\n        <th>\n          Process Deviations\n        </th>\n        <th>\n          Predicted Risk\n        </th>\n      </thead>\n      <tbody>\n        {mapRows()}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default TableScreen4;","/home/alyssa/code/projects/engineering-manager-proto-1/src/Screen4/Components/PredictedRiskRectangle.js",["211"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst PredictedRiskRectangle = ({color}) => {\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    setWidth(elementRef.current.attrs.container.offsetWidth);\n\n  }, [elementRef.current]);\n\n  const getColor = () => {\n    if (color === 4) {\n      return '#DF2935';\n    } else if (color === 3) {\n      return '#F58F29';\n    } else if (color === 2) {\n      return '#EFEA5A';\n    } else {\n      return '#0DAB76';\n    }\n  };\n\n\n  const rectWidth = width/2;\n\n  return(\n    <Stage ref={elementRef} width={rectWidth} height={40}>\n      <Layer>\n        <Rect \n          x={0}\n          y={10}\n          width={rectWidth/2}\n          height={20}\n          fill={getColor()}\n        />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default PredictedRiskRectangle;","/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Containers/TrendsPageContainer.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Containers/TrendsDropdownsContainer.js",[],"/home/alyssa/code/projects/engineering-manager-proto-1/src/TrendsPage/Components/TrendsDropdowns.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":6,"column":27,"nodeType":"218","messageId":"219","endLine":6,"endColumn":36},{"ruleId":"216","severity":1,"message":"220","line":11,"column":8,"nodeType":"218","messageId":"219","endLine":11,"endColumn":11},{"ruleId":"216","severity":1,"message":"221","line":12,"column":8,"nodeType":"218","messageId":"219","endLine":12,"endColumn":11},{"ruleId":"216","severity":1,"message":"222","line":22,"column":7,"nodeType":"218","messageId":"219","endLine":22,"endColumn":14},{"ruleId":"216","severity":1,"message":"223","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":22},{"ruleId":"216","severity":1,"message":"224","line":5,"column":24,"nodeType":"218","messageId":"219","endLine":5,"endColumn":35},{"ruleId":"216","severity":1,"message":"225","line":5,"column":37,"nodeType":"218","messageId":"219","endLine":5,"endColumn":47},{"ruleId":"216","severity":1,"message":"226","line":5,"column":49,"nodeType":"218","messageId":"219","endLine":5,"endColumn":61},{"ruleId":"216","severity":1,"message":"227","line":5,"column":63,"nodeType":"218","messageId":"219","endLine":5,"endColumn":75},{"ruleId":"228","severity":1,"message":"229","line":131,"column":13,"nodeType":"230","endLine":131,"endColumn":86},{"ruleId":"228","severity":1,"message":"229","line":133,"column":13,"nodeType":"230","endLine":133,"endColumn":83},{"ruleId":"216","severity":1,"message":"231","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":12},{"ruleId":"216","severity":1,"message":"231","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"232","line":1,"column":28,"nodeType":"218","messageId":"219","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"233","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":44},{"ruleId":"216","severity":1,"message":"234","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":13},{"ruleId":"216","severity":1,"message":"235","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":15},{"ruleId":"216","severity":1,"message":"236","line":3,"column":17,"nodeType":"218","messageId":"219","endLine":3,"endColumn":22},{"ruleId":"216","severity":1,"message":"237","line":3,"column":24,"nodeType":"218","messageId":"219","endLine":3,"endColumn":28},{"ruleId":"216","severity":1,"message":"238","line":5,"column":16,"nodeType":"218","messageId":"219","endLine":5,"endColumn":22},{"ruleId":"216","severity":1,"message":"239","line":7,"column":8,"nodeType":"218","messageId":"219","endLine":7,"endColumn":20},{"ruleId":"240","severity":1,"message":"241","line":11,"column":6,"nodeType":"242","endLine":11,"endColumn":26,"suggestions":"243"},{"ruleId":"244","severity":1,"message":"245","line":27,"column":32,"nodeType":"246","messageId":"247","endLine":27,"endColumn":34},{"ruleId":"244","severity":1,"message":"245","line":27,"column":61,"nodeType":"246","messageId":"247","endLine":27,"endColumn":63},{"ruleId":"244","severity":1,"message":"248","line":27,"column":61,"nodeType":"246","messageId":"247","endLine":27,"endColumn":63},{"ruleId":"244","severity":1,"message":"248","line":27,"column":87,"nodeType":"246","messageId":"247","endLine":27,"endColumn":89},{"ruleId":"244","severity":1,"message":"248","line":27,"column":116,"nodeType":"246","messageId":"247","endLine":27,"endColumn":118},{"ruleId":"244","severity":1,"message":"248","line":27,"column":142,"nodeType":"246","messageId":"247","endLine":27,"endColumn":144},{"ruleId":"216","severity":1,"message":"249","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":13},{"ruleId":"216","severity":1,"message":"250","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":19},{"ruleId":"240","severity":1,"message":"241","line":10,"column":6,"nodeType":"242","endLine":10,"endColumn":26,"suggestions":"251"},{"ruleId":"240","severity":1,"message":"241","line":10,"column":6,"nodeType":"242","endLine":10,"endColumn":26,"suggestions":"252"},{"ruleId":"216","severity":1,"message":"232","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"233","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":44},{"ruleId":"216","severity":1,"message":"253","line":2,"column":30,"nodeType":"218","messageId":"219","endLine":2,"endColumn":34},{"ruleId":"216","severity":1,"message":"232","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"233","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":44},{"ruleId":"216","severity":1,"message":"253","line":2,"column":30,"nodeType":"218","messageId":"219","endLine":2,"endColumn":34},{"ruleId":"216","severity":1,"message":"249","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":13},{"ruleId":"216","severity":1,"message":"221","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":11},{"ruleId":"228","severity":1,"message":"229","line":20,"column":13,"nodeType":"230","endLine":20,"endColumn":60},{"ruleId":"240","severity":1,"message":"241","line":11,"column":6,"nodeType":"242","endLine":11,"endColumn":26,"suggestions":"254"},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'history' is assigned a value but never used.","'VictoryChart' is defined but never used.","'VictoryAxis' is defined but never used.","'VictoryBar' is defined but never used.","'VictoryLabel' is defined but never used.","'VictoryStack' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Form' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Konva' is defined but never used.","'Stage' is defined but never used.","'Layer' is defined but never used.","'Line' is defined but never used.","'uuidv4' is defined but never used.","'EllipsePoint' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'elementRef.current'. Either exclude it or remove the dependency array. Mutable values like 'elementRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["257"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'Table' is defined but never used.","'ProgressBar' is defined but never used.",["258"],["259"],"'Text' is defined but never used.",["260"],"no-global-assign","no-unsafe-negation",{"desc":"261","fix":"262"},{"desc":"261","fix":"263"},{"desc":"261","fix":"264"},{"desc":"261","fix":"265"},"Update the dependencies array to be: []",{"range":"266","text":"267"},{"range":"268","text":"267"},{"range":"269","text":"267"},{"range":"270","text":"267"},[307,327],"[]",[364,384],[349,369],[322,342]]